import asyncio
import datetime
import os
from pathlib import Path
import time

import pandas as pd
import numpy as np

from loguru import logger
from dotenv import load_dotenv
from scipy.integrate import trapezoid

from BV_experiments.src.general_platform.Executor._hw_control import *
from BV_experiments.src.general_platform.Executor._hw_control import command_session
from BV_experiments.src.general_platform.platform_error import IncompleteAnalysis

# load .env file
dotenv_path = Path(r"/BV_experiments/Example2_methionie/.env")
load_dotenv(dotenv_path=dotenv_path)




def process_ir_pd():
    # wavelength
    ROI = [1800, 850]
    POI = {"acetone_1": [1735, 1670], "acetone_2": [1265, 1211], "RB_1": [1650, 1558], "RB_2": [1556, 1476], "sulfoxide": [1056, 965]}
    # fixme: better method index [1800: 850]
    bg_path = Path(r"W:\BS-FlowChemistry\People\Wei-Hsin\GL_data\2_flowIR\20231011_ir_bg_100.csv")
    bg_raw = pd.read_csv(bg_path, index_col="bg_intensity")

    # n_df = pd.DataFrame(t2["intensity"], index=t2["wavenumber"], columns=[2])

    bg = bg_raw[ROI[0]:ROI[1]]  #  n_bg.shape: (255, 1)
    global_max = max(bg["bg_intensity"])
    # peaks, properties = signal.find_peaks(
    #     cs_np[0],
    #     height= 0.02 / 20,  # defualt: / 80
    #     prominence= 0.02 / 45,  # defualt: / 80
    #     # The prominence of a peak measures how much a peak stands out from the surrounding baseline
    #     width=0.05,  # Required width of peaks in samples.
    #     rel_height=0.5,  # Used for calculation of the peaks width
    # )
    #
    # for center, base_left, base_right in zip(
    #         peaks, properties["left_ips"], properties["right_ips"]
    # ):
    #     # Start from find_peaks positions (i.e. width at half max)
    #     left_in_min = d.index[int(base_left)]
    #     right_in_min = d.index[int(base_right)]
    #
    #     # Failsafe to ensure these are set
    #     peak_start = d.index[0]
    #     peak_end = d.index[-1]
    #
    #     # We rely on the chromatogram to be smoothed at this point!
    #     # Iterate left side of peak from right to left (i.e. np.flip)
    #     # for steps, derivative_value in enumerate(np.flip(d["dAbs"][:left_in_min])):
    #     for steps, derivative_value in enumerate(np.flip(d["dCorr"][:left_in_min])):
    #         if derivative_value < 1e-2:  # original 1e-3
    #             peak_start = d.index[
    #                 int(base_left) - steps + 1
    #                 ]  # +1 ensures non-overlapping peaks
    #             break



def process_old_ir_np(s_path: str,
                      bg_path: str = r"W:\BS-FlowChemistry\People\Wei-Hsin\GL_data\2_flowIR\20231011_ir_bg_100.csv"):
    ROI = [595, 840]
    POI = {"acetone_1": [608, 626], "acetone_2": [734, 749], "RB_1": [631, 656], "RB_2": [656, 678], "sulfoxide": [790, 815]}

    bg_path = Path(bg_path)
    bg = pd.read_csv(bg_path, index_col=0, header=0)
    bg_np = bg.to_numpy()[:, 0]  # .iloc[595:840] -> ndarray:(245,)
    w = bg.index.to_numpy()

    s_path = Path(s_path)
    s_np = pd.read_csv(s_path, index_col=0, header=0).to_numpy()[:, 0]
    s2_np = pd.read_csv(s_path, index_col=0, header=0).to_numpy()[:, 0]

    # ax = plt.plot(w[595:840], s_np[595:840] - bg_np[595:840])
    # plt.show()

    # determine the signal is consistent
    if ((s_np[ROI[0]:ROI[1]] - s2_np[ROI[0]:ROI[1]]) < 0.005).all().item():
        # todo: check acetone peak is already exist or not....
        local_max = max(s2_np[ROI[0]:ROI[1]])
        if local_max < 0.05:
            logger.error(f"IS_1 peak is below 0.05 intensity, skipped.")

        cs_np = s2_np - bg_np
        dx = 3.72915867122992
        IS_area = trapezoid(cs_np[POI['acetone_2'][0]:POI['acetone_2'][1]], np.arange(POI['acetone_2'][1]-POI['acetone_2'][0]) * dx)
        P_area = trapezoid(cs_np[POI['sulfoxide'][0]:POI['sulfoxide'][1]], np.arange(POI['sulfoxide'][1]-POI['sulfoxide'][0]) * dx)
        RB_area = trapezoid(cs_np[POI['RB_2'][0]:POI['RB_2'][1]], np.arange(POI['RB_2'][1]-POI['RB_2'][0]) * dx)
        corr_p = P_area / IS_area
        logger.debug(f"area of product: {P_area} (corrected {corr_p}); IS_2: {IS_area}; RB_2: {RB_area}.")
        cc = 0.2998
        return corr_p * cc
    else:
        logger.error("something wrong. check input file.")
        raise IncompleteAnalysis()

async def collect_ir_bg(date: datetime, name: str | None = None):
    # acquire IR spectra
    with command_session() as sess:
        read_count = sess.get(flowir_endpoint + "/ir-control/spectrum-count")
        read_spec = sess.put(flowir_endpoint + "/ir-control/acquire-spectrum?treated=true")
        spc = read_spec.json()

        df = pd.DataFrame(spc["intensity"], index=spc["wavenumber"], columns=[0])
        df.to_csv(fr"W:\BS-FlowChemistry\People\Wei-Hsin\GL_data\2_flowIR\{date}_ir_bg_{read_count.json()}.csv")

    return spc["intensity"], df

async def process_ir_spc(measuring_timeout: float,
                         bg_list: list | None = None,
                         measure_time: float | None = None):
    """

    :param date:
    :param mongo_id:
    :param measuring_timeout:
    :param bg_list:
    :param measure_time: in min......
    :return:
    """
    ROI = [595, 840]
    POI = {"acetone_1": [608, 626], "acetone_2": [734, 749], "RB_1": [631, 656], "RB_2": [656, 678],
           "sulfoxide": [790, 815]}

    logger.info(f"____ collect ir spectra and process ____")
    measure_period = int(os.environ.get("MEASURING_TIME")) if not measure_time else measure_time * 60
    end_measure = time.monotonic() + measuring_timeout * 60

    if not bg_list:
        logger.warning(f"old bg data was used.")
        bg_path = Path(r"W:\BS-FlowChemistry\People\Wei-Hsin\GL_data\2_flowIR\20231011_ir_bg_100.csv")
        bg = pd.read_csv(bg_path, index_col=0)

        bg_np = bg.to_numpy()[:, 0]  # .iloc[595:840] -> ndarray:(245,)
        w = bg.index.to_numpy()

    else:
        bg_np = np.array(bg_list)
        w = np.array([
        4001.3872542256963,
        3997.65809555447,
        3993.9289368832438,
        3990.1997782120175,
        3986.470619540791,
        3982.741460869565,
        3979.0123021983386,
        3975.2831435271123,
        3971.553984855886,
        3967.8248261846597,
        3964.0956675134335,
        3960.366508842207,
        3956.637350170981,
        3952.9081914997546,
        3949.1790328285283,
        3945.449874157302,
        3941.7207154860757,
        3937.9915568148494,
        3934.262398143623,
        3930.533239472397,
        3926.8040808011706,
        3923.0749221299443,
        3919.345763458718,
        3915.6166047874917,
        3911.8874461162654,
        3908.158287445039,
        3904.429128773813,
        3900.6999701025866,
        3896.9708114313603,
        3893.241652760134,
        3889.5124940889077,
        3885.7833354176814,
        3882.054176746455,
        3878.325018075229,
        3874.5958594040026,
        3870.8667007327763,
        3867.13754206155,
        3863.4083833903237,
        3859.6792247190974,
        3855.950066047871,
        3852.220907376645,
        3848.4917487054186,
        3844.7625900341923,
        3841.033431362966,
        3837.3042726917397,
        3833.5751140205134,
        3829.845955349287,
        3826.116796678061,
        3822.3876380068345,
        3818.6584793356083,
        3814.929320664382,
        3811.2001619931557,
        3807.4710033219294,
        3803.741844650703,
        3800.012685979477,
        3796.2835273082505,
        3792.5543686370243,
        3788.825209965798,
        3785.0960512945717,
        3781.3668926233454,
        3777.637733952119,
        3773.908575280893,
        3770.1794166096665,
        3766.4502579384402,
        3762.721099267214,
        3758.9919405959877,
        3755.2627819247614,
        3751.533623253535,
        3747.804464582309,
        3744.0753059110825,
        3740.3461472398562,
        3736.61698856863,
        3732.8878298974037,
        3729.1586712261774,
        3725.429512554951,
        3721.700353883725,
        3717.9711952124985,
        3714.2420365412722,
        3710.512877870046,
        3706.7837191988197,
        3703.0545605275934,
        3699.325401856367,
        3695.596243185141,
        3691.8670845139145,
        3688.137925842688,
        3684.408767171462,
        3680.6796085002356,
        3676.9504498290094,
        3673.221291157783,
        3669.492132486557,
        3665.7629738153305,
        3662.033815144104,
        3658.304656472878,
        3654.5754978016516,
        3650.8463391304253,
        3647.117180459199,
        3643.388021787973,
        3639.6588631167465,
        3635.92970444552,
        3632.200545774294,
        3628.4713871030676,
        3624.7422284318413,
        3621.013069760615,
        3617.2839110893888,
        3613.5547524181625,
        3609.825593746936,
        3606.09643507571,
        3602.3672764044836,
        3598.6381177332573,
        3594.908959062031,
        3591.1798003908048,
        3587.4506417195785,
        3583.721483048352,
        3579.992324377126,
        3576.2631657058996,
        3572.5340070346733,
        3568.804848363447,
        3565.0756896922207,
        3561.3465310209945,
        3557.617372349768,
        3553.888213678542,
        3550.1590550073156,
        3546.4298963360893,
        3542.700737664863,
        3538.9715789936367,
        3535.2424203224105,
        3531.513261651184,
        3527.784102979958,
        3524.0549443087316,
        3520.3257856375053,
        3516.596626966279,
        3512.8674682950527,
        3509.1383096238264,
        3505.4091509526,
        3501.679992281374,
        3497.9508336101476,
        3494.2216749389213,
        3490.492516267695,
        3486.7633575964687,
        3483.0341989252424,
        3479.305040254016,
        3475.57588158279,
        3471.8467229115636,
        3468.1175642403373,
        3464.388405569111,
        3460.6592468978847,
        3456.9300882266584,
        3453.200929555432,
        3449.471770884206,
        3445.7426122129796,
        3442.0134535417533,
        3438.284294870527,
        3434.5551361993007,
        3430.8259775280744,
        3427.096818856848,
        3423.367660185622,
        3419.6385015143956,
        3415.9093428431693,
        3412.180184171943,
        3408.4510255007167,
        3404.7218668294904,
        3400.992708158264,
        3397.263549487038,
        3393.5343908158115,
        3389.8052321445853,
        3386.076073473359,
        3382.3469148021327,
        3378.6177561309064,
        3374.88859745968,
        3371.159438788454,
        3367.4302801172275,
        3363.7011214460013,
        3359.971962774775,
        3356.2428041035487,
        3352.5136454323224,
        3348.784486761096,
        3345.05532808987,
        3341.3261694186435,
        3337.5970107474172,
        3333.867852076191,
        3330.1386934049647,
        3326.4095347337384,
        3322.680376062512,
        3318.951217391286,
        3315.2220587200595,
        3311.4929000488332,
        3307.763741377607,
        3304.0345827063807,
        3300.3054240351544,
        3296.576265363928,
        3292.847106692702,
        3289.1179480214755,
        3285.388789350249,
        3281.659630679023,
        3277.9304720077967,
        3274.2013133365704,
        3270.472154665344,
        3266.742995994118,
        3263.0138373228915,
        3259.284678651665,
        3255.555519980439,
        3251.8263613092126,
        3248.0972026379864,
        3244.36804396676,
        3240.638885295534,
        3236.9097266243075,
        3233.180567953081,
        3229.451409281855,
        3225.7222506106286,
        3221.9930919394023,
        3218.263933268176,
        3214.53477459695,
        3210.8056159257235,
        3207.076457254497,
        3203.347298583271,
        3199.6181399120446,
        3195.8889812408183,
        3192.159822569592,
        3188.4306638983658,
        3184.7015052271395,
        3180.972346555913,
        3177.243187884687,
        3173.5140292134606,
        3169.7848705422343,
        3166.055711871008,
        3162.3265531997818,
        3158.5973945285555,
        3154.868235857329,
        3151.139077186103,
        3147.4099185148766,
        3143.6807598436503,
        3139.951601172424,
        3136.2224425011977,
        3132.4932838299715,
        3128.764125158745,
        3125.034966487519,
        3121.3058078162926,
        3117.5766491450663,
        3113.84749047384,
        3110.1183318026137,
        3106.3891731313875,
        3102.660014460161,
        3098.930855788935,
        3095.2016971177086,
        3091.4725384464823,
        3087.743379775256,
        3084.0142211040297,
        3080.2850624328034,
        3076.555903761577,
        3072.826745090351,
        3069.0975864191246,
        3065.3684277478983,
        3061.639269076672,
        3057.9101104054457,
        3054.1809517342194,
        3050.451793062993,
        3046.722634391767,
        3042.9934757205406,
        3039.2643170493143,
        3035.535158378088,
        3031.8059997068617,
        3028.0768410356354,
        3024.347682364409,
        3020.618523693183,
        3016.8893650219566,
        3013.1602063507303,
        3009.431047679504,
        3005.7018890082777,
        3001.9727303370514,
        2998.243571665825,
        2994.514412994599,
        2990.7852543233726,
        2987.0560956521463,
        2983.32693698092,
        2979.5977783096937,
        2975.8686196384674,
        2972.139460967241,
        2968.410302296015,
        2964.6811436247885,
        2960.9519849535623,
        2957.222826282336,
        2953.4936676111097,
        2949.7645089398834,
        2946.035350268657,
        2942.306191597431,
        2938.5770329262045,
        2934.8478742549783,
        2931.118715583752,
        2927.3895569125257,
        2923.6603982412994,
        2919.931239570073,
        2916.202080898847,
        2912.4729222276205,
        2908.7437635563942,
        2905.014604885168,
        2901.2854462139417,
        2897.5562875427154,
        2893.827128871489,
        2890.097970200263,
        2886.3688115290365,
        2882.6396528578102,
        2878.910494186584,
        2875.1813355153577,
        2871.4521768441314,
        2867.723018172905,
        2863.993859501679,
        2860.2647008304525,
        2856.535542159226,
        2852.806383488,
        2849.0772248167737,
        2845.3480661455474,
        2841.618907474321,
        2837.889748803095,
        2834.1605901318685,
        2830.431431460642,
        2826.702272789416,
        2822.9731141181896,
        2819.2439554469634,
        2815.514796775737,
        2811.785638104511,
        2808.0564794332845,
        2804.327320762058,
        2800.598162090832,
        2796.8690034196056,
        2793.1398447483793,
        2789.410686077153,
        2785.6815274059268,
        2781.9523687347005,
        2778.223210063474,
        2774.494051392248,
        2770.7648927210216,
        2767.0357340497953,
        2763.306575378569,
        2759.5774167073428,
        2755.8482580361165,
        2752.11909936489,
        2748.389940693664,
        2744.6607820224376,
        2740.9316233512113,
        2737.202464679985,
        2733.4733060087588,
        2729.7441473375325,
        2726.014988666306,
        2722.28582999508,
        2718.5566713238536,
        2714.8275126526273,
        2711.098353981401,
        2707.3691953101747,
        2703.6400366389485,
        2699.910877967722,
        2696.181719296496,
        2692.4525606252696,
        2688.7234019540433,
        2684.994243282817,
        2681.2650846115907,
        2677.5359259403645,
        2673.806767269138,
        2670.077608597912,
        2666.3484499266856,
        2662.6192912554593,
        2658.890132584233,
        2655.1609739130067,
        2651.4318152417804,
        2647.702656570554,
        2643.973497899328,
        2640.2443392281016,
        2636.5151805568753,
        2632.786021885649,
        2629.0568632144227,
        2625.3277045431964,
        2621.59854587197,
        2617.869387200744,
        2614.1402285295176,
        2610.4110698582913,
        2606.681911187065,
        2602.9527525158387,
        2599.2235938446124,
        2595.494435173386,
        2591.76527650216,
        2588.0361178309336,
        2584.3069591597073,
        2580.577800488481,
        2576.8486418172547,
        2573.1194831460284,
        2569.390324474802,
        2565.661165803576,
        2561.9320071323496,
        2558.2028484611233,
        2554.473689789897,
        2550.7445311186707,
        2547.0153724474444,
        2543.286213776218,
        2539.557055104992,
        2535.8278964337655,
        2532.0987377625393,
        2528.369579091313,
        2524.6404204200867,
        2520.9112617488604,
        2517.182103077634,
        2513.452944406408,
        2509.7237857351815,
        2505.9946270639552,
        2502.265468392729,
        2498.5363097215027,
        2494.8071510502764,
        2491.07799237905,
        2487.348833707824,
        2483.6196750365975,
        2479.8905163653712,
        2476.161357694145,
        2472.4321990229187,
        2468.7030403516924,
        2464.973881680466,
        2461.24472300924,
        2457.5155643380135,
        2453.7864056667872,
        2450.057246995561,
        2446.3280883243347,
        2442.5989296531084,
        2438.869770981882,
        2435.140612310656,
        2431.4114536394295,
        2427.682294968203,
        2423.953136296977,
        2420.2239776257506,
        2416.4948189545244,
        2412.765660283298,
        2409.036501612072,
        2405.3073429408455,
        2401.578184269619,
        2397.849025598393,
        2394.1198669271666,
        2390.3907082559404,
        2386.661549584714,
        2382.932390913488,
        2379.2032322422615,
        2375.474073571035,
        2371.744914899809,
        2368.0157562285826,
        2364.2865975573563,
        2360.55743888613,
        2356.8282802149038,
        2353.0991215436775,
        2349.369962872451,
        2345.640804201225,
        2341.9116455299986,
        2338.1824868587723,
        2334.453328187546,
        2330.7241695163198,
        2326.9950108450935,
        2323.265852173867,
        2319.536693502641,
        2315.8075348314146,
        2312.0783761601883,
        2308.349217488962,
        2304.6200588177358,
        2300.8909001465095,
        2297.161741475283,
        2293.432582804057,
        2289.7034241328306,
        2285.9742654616043,
        2282.245106790378,
        2278.5159481191517,
        2274.7867894479255,
        2271.057630776699,
        2267.328472105473,
        2263.5993134342466,
        2259.8701547630203,
        2256.140996091794,
        2252.4118374205677,
        2248.6826787493414,
        2244.953520078115,
        2241.224361406889,
        2237.4952027356626,
        2233.7660440644363,
        2230.03688539321,
        2226.3077267219837,
        2222.5785680507574,
        2218.849409379531,
        2215.120250708305,
        2211.3910920370786,
        2207.6619333658523,
        2203.932774694626,
        2200.2036160233997,
        2196.4744573521734,
        2192.745298680947,
        2189.016140009721,
        2185.2869813384946,
        2181.5578226672683,
        2177.828663996042,
        2174.0995053248157,
        2170.3703466535894,
        2166.641187982363,
        2162.912029311137,
        2159.1828706399106,
        2155.4537119686843,
        2151.724553297458,
        2147.9953946262317,
        2144.2662359550054,
        2140.537077283779,
        2136.807918612553,
        2133.0787599413266,
        2129.3496012701003,
        2125.620442598874,
        2121.8912839276477,
        2118.1621252564214,
        2114.432966585195,
        2110.703807913969,
        2106.9746492427425,
        2103.2454905715163,
        2099.51633190029,
        2095.7871732290637,
        2092.0580145578374,
        2088.328855886611,
        2084.599697215385,
        2080.8705385441585,
        2077.1413798729322,
        2073.412221201706,
        2069.6830625304797,
        2065.9539038592534,
        2062.224745188027,
        2058.495586516801,
        2054.7664278455745,
        2051.0372691743482,
        2047.308110503122,
        2043.5789518318957,
        2039.8497931606694,
        2036.120634489443,
        2032.3914758182168,
        2028.6623171469905,
        2024.9331584757642,
        2021.203999804538,
        2017.4748411333117,
        2013.7456824620854,
        2010.016523790859,
        2006.2873651196328,
        2002.5582064484065,
        1998.8290477771802,
        1995.099889105954,
        1991.3707304347276,
        1987.6415717635014,
        1983.912413092275,
        1980.1832544210488,
        1976.4540957498225,
        1972.7249370785962,
        1968.99577840737,
        1965.2666197361436,
        1961.5374610649174,
        1957.808302393691,
        1954.0791437224648,
        1950.3499850512385,
        1946.6208263800122,
        1942.891667708786,
        1939.1625090375596,
        1935.4333503663333,
        1931.704191695107,
        1927.9750330238808,
        1924.2458743526545,
        1920.5167156814282,
        1916.787557010202,
        1913.0583983389756,
        1909.3292396677493,
        1905.600080996523,
        1901.8709223252968,
        1898.1417636540705,
        1894.4126049828442,
        1890.683446311618,
        1886.9542876403916,
        1883.2251289691653,
        1879.495970297939,
        1875.7668116267128,
        1872.0376529554865,
        1868.3084942842602,
        1864.579335613034,
        1860.8501769418076,
        1857.1210182705813,
        1853.391859599355,
        1849.6627009281287,
        1845.9335422569025,
        1842.2043835856762,
        1838.4752249144499,
        1834.7460662432236,
        1831.0169075719973,
        1827.287748900771,
        1823.5585902295447,
        1819.8294315583184,
        1816.1002728870922,
        1812.3711142158659,
        1808.6419555446396,
        1804.9127968734133,
        1801.183638202187,
        1797.4544795309607,
        1793.7253208597344,
        1789.9961621885082,
        1786.2670035172819,
        1782.5378448460556,
        1778.8086861748293,
        1775.079527503603,
        1771.3503688323767,
        1767.6212101611504,
        1763.8920514899241,
        1760.1628928186979,
        1756.4337341474716,
        1752.7045754762453,
        1748.975416805019,
        1745.2462581337927,
        1741.5170994625664,
        1737.7879407913401,
        1734.0587821201138,
        1730.3296234488876,
        1726.6004647776613,
        1722.871306106435,
        1719.1421474352087,
        1715.4129887639824,
        1711.6838300927561,
        1707.9546714215298,
        1704.2255127503036,
        1700.4963540790773,
        1696.767195407851,
        1693.0380367366247,
        1689.3088780653984,
        1685.5797193941721,
        1681.8505607229458,
        1678.1214020517195,
        1674.3922433804933,
        1670.663084709267,
        1666.9339260380407,
        1663.2047673668144,
        1659.475608695588,
        1655.7464500243618,
        1652.0172913531355,
        1648.2881326819092,
        1644.558974010683,
        1640.8298153394567,
        1637.1006566682304,
        1633.371497997004,
        1629.6423393257778,
        1625.9131806545515,
        1622.1840219833252,
        1618.454863312099,
        1614.7257046408727,
        1610.9965459696464,
        1607.26738729842,
        1603.5382286271938,
        1599.8090699559675,
        1596.0799112847412,
        1592.350752613515,
        1588.6215939422887,
        1584.8924352710624,
        1581.163276599836,
        1577.4341179286098,
        1573.7049592573835,
        1569.9758005861572,
        1566.246641914931,
        1562.5174832437046,
        1558.7883245724784,
        1555.059165901252,
        1551.3300072300258,
        1547.6008485587995,
        1543.8716898875732,
        1540.142531216347,
        1536.4133725451206,
        1532.6842138738944,
        1528.955055202668,
        1525.2258965314418,
        1521.4967378602155,
        1517.7675791889892,
        1514.038420517763,
        1510.3092618465366,
        1506.5801031753103,
        1502.850944504084,
        1499.1217858328578,
        1495.3926271616315,
        1491.6634684904052,
        1487.934309819179,
        1484.2051511479526,
        1480.4759924767263,
        1476.7468338055,
        1473.0176751342738,
        1469.2885164630475,
        1465.5593577918212,
        1461.830199120595,
        1458.1010404493686,
        1454.3718817781423,
        1450.642723106916,
        1446.9135644356898,
        1443.1844057644635,
        1439.4552470932372,
        1435.726088422011,
        1431.9969297507846,
        1428.2677710795583,
        1424.538612408332,
        1420.8094537371057,
        1417.0802950658795,
        1413.3511363946532,
        1409.6219777234269,
        1405.8928190522006,
        1402.1636603809743,
        1398.434501709748,
        1394.7053430385217,
        1390.9761843672954,
        1387.2470256960692,
        1383.5178670248429,
        1379.7887083536166,
        1376.0595496823903,
        1372.330391011164,
        1368.6012323399377,
        1364.8720736687114,
        1361.1429149974851,
        1357.4137563262589,
        1353.6845976550326,
        1349.9554389838063,
        1346.22628031258,
        1342.4971216413537,
        1338.7679629701274,
        1335.0388042989011,
        1331.3096456276749,
        1327.5804869564486,
        1323.8513282852223,
        1320.122169613996,
        1316.3930109427697,
        1312.6638522715434,
        1308.9346936003171,
        1305.2055349290908,
        1301.4763762578646,
        1297.7472175866383,
        1294.018058915412,
        1290.2889002441857,
        1286.5597415729594,
        1282.8305829017331,
        1279.1014242305068,
        1275.3722655592805,
        1271.6431068880543,
        1267.913948216828,
        1264.1847895456017,
        1260.4556308743754,
        1256.7264722031491,
        1252.9973135319228,
        1249.2681548606965,
        1245.5389961894703,
        1241.809837518244,
        1238.0806788470177,
        1234.3515201757914,
        1230.622361504565,
        1226.8932028333388,
        1223.1640441621125,
        1219.4348854908862,
        1215.70572681966,
        1211.9765681484337,
        1208.2474094772074,
        1204.518250805981,
        1200.7890921347548,
        1197.0599334635285,
        1193.3307747923022,
        1189.601616121076,
        1185.8724574498497,
        1182.1432987786234,
        1178.414140107397,
        1174.6849814361708,
        1170.9558227649445,
        1167.2266640937182,
        1163.497505422492,
        1159.7683467512657,
        1156.0391880800394,
        1152.310029408813,
        1148.5808707375868,
        1144.8517120663605,
        1141.1225533951342,
        1137.393394723908,
        1133.6642360526816,
        1129.9350773814554,
        1126.205918710229,
        1122.4767600390028,
        1118.7476013677765,
        1115.0184426965502,
        1111.289284025324,
        1107.5601253540976,
        1103.8309666828713,
        1100.101808011645,
        1096.3726493404188,
        1092.6434906691925,
        1088.9143319979662,
        1085.18517332674,
        1081.4560146555136,
        1077.7268559842873,
        1073.997697313061,
        1070.2685386418348,
        1066.5393799706085,
        1062.8102212993822,
        1059.081062628156,
        1055.3519039569296,
        1051.6227452857033,
        1047.893586614477,
        1044.1644279432508,
        1040.4352692720245,
        1036.7061106007982,
        1032.976951929572,
        1029.2477932583456,
        1025.5186345871193,
        1021.789475915893,
        1018.0603172446667,
        1014.3311585734405,
        1010.6019999022142,
        1006.8728412309879,
        1003.1436825597616,
        999.4145238885353,
        995.685365217309,
        991.9562065460827,
        988.2270478748565,
        984.4978892036302,
        980.7687305324039,
        977.0395718611776,
        973.3104131899513,
        969.581254518725,
        965.8520958474987,
        962.1229371762724,
        958.3937785050462,
        954.6646198338199,
        950.9354611625936,
        947.2063024913673,
        943.477143820141,
        939.7479851489147,
        936.0188264776884,
        932.2896678064621,
        928.5605091352359,
        924.8313504640096,
        921.1021917927833,
        917.373033121557,
        913.6438744503307,
        909.9147157791044,
        906.1855571078781,
        902.4563984366519,
        898.7272397654256,
        894.9980810941993,
        891.268922422973,
        887.5397637517467,
        883.8106050805204,
        880.0814464092941,
        876.3522877380678,
        872.6231290668416,
        868.8939703956153,
        865.164811724389,
        861.4356530531627,
        857.7064943819364,
        853.9773357107101,
        850.2481770394838,
        846.5190183682575,
        842.7898596970313,
        839.060701025805,
        835.3315423545787,
        831.6023836833524,
        827.8732250121261,
        824.1440663408998,
        820.4149076696735,
        816.6857489984473,
        812.956590327221,
        809.2274316559947,
        805.4982729847684,
        801.7691143135421,
        798.0399556423158,
        794.3107969710895,
        790.5816382998632,
        786.852479628637,
        783.1233209574107,
        779.3941622861844,
        775.6650036149581,
        771.9358449437318,
        768.2066862725055,
        764.4775276012792,
        760.748368930053,
        757.0192102588267,
        753.2900515876004,
        749.5608929163741,
        745.8317342451478,
        742.1025755739215,
        738.3734169026952,
        734.6442582314689,
        730.9150995602427,
        727.1859408890164,
        723.4567822177901,
        719.7276235465638,
        715.9984648753375,
        712.2693062041112,
        708.5401475328849,
        704.8109888616586,
        701.0818301904324,
        697.3526715192061,
        693.6235128479798,
        689.8943541767535,
        686.1651955055272,
        682.4360368343009,
        678.7068781630746,
        674.9777194918483,
        671.2485608206221,
        667.5194021493958,
        663.7902434781695,
        660.0610848069432,
        656.3319261357169,
        652.6027674644906,
        648.8736087932758
    ])

    with command_session() as sess:
        read_count = sess.get(flowir_endpoint + "/ir-control/spectrum-count")
        read_spec = sess.put(flowir_endpoint + "/ir-control/acquire-spectrum?treated=true")
        count_1 = read_count.json()
        spc = read_spec.json()
        s1_np = np.array(spc["intensity"])
        await asyncio.sleep(measure_period)

        while time.monotonic() < end_measure:
            read_count = sess.get(flowir_endpoint + "/ir-control/spectrum-count")
            read_spec = sess.put(flowir_endpoint + "/ir-control/acquire-spectrum?treated=true")
            count_2 = read_count.json()
            spc = read_spec.json()
            s2_np = np.array(spc["intensity"])

            # make sure two spect is from different measurement
            if count_2 - count_1 < 0:
                logger.warning(f"two collections get the same measurement.")
                await asyncio.sleep(2)
                continue

            # determine the signal is consistent
            if ((s1_np[ROI[0]:ROI[1]] - s2_np[ROI[0]:ROI[1]]) < 0.005).all().item():

                # todo: check acetone peak is already exist or not....
                local_max = max(s2_np[ROI[0]:ROI[1]])
                if local_max < 0.03:
                    logger.error(f"IS_1 peak is below 0.03 intensity, skipped.")
                    continue

                cs_np = s2_np - bg_np
                dx = 3.72915867122992
                IS_area = trapezoid(cs_np[POI['acetone_2'][0]:POI['acetone_2'][1]],
                                    np.arange(POI['acetone_2'][1] - POI['acetone_2'][0]) * dx)
                P_area = trapezoid(cs_np[POI['sulfoxide'][0]:POI['sulfoxide'][1]],
                                   np.arange(POI['sulfoxide'][1] - POI['sulfoxide'][0]) * dx)
                RB_area = trapezoid(cs_np[POI['RB_2'][0]:POI['RB_2'][1]],
                                    np.arange(POI['RB_2'][1] - POI['RB_2'][0]) * dx)
                corr_p = P_area / IS_area
                logger.debug(f"area of product: {P_area} (corrected {corr_p}); IS_2: {IS_area}; RB_2: {RB_area}.")
                cc = 0.2998
                return corr_p * cc
            else:
                count_1 = count_2
                s1_np = s2_np
                await asyncio.sleep(measure_period)

        logger.error("No proper data was obtained til timeout.")
        return 0

async def record_ir_log(date: datetime, mongo_id: str,
                        measuring_timeout: float,
                        measure_time: float | None = None):
    """
    record the ir data for logging.....
    :param date:
    :param mongo_id:
    :param measuring_timeout:
    :param measure_time:
    :return:
    """
    logger.info(f"____ collect and record ir spectra ____")

    measure_period = int(os.environ.get("MEASURING_TIME")) if not measure_time else measure_time * 60
    end_measure = time.monotonic() + measuring_timeout * 60

    # acquire IR spectra
    with command_session() as sess:
        read_count = sess.get(flowir_endpoint + "/ir-control/spectrum-count")
        read_spec = sess.put(flowir_endpoint + "/ir-control/acquire-spectrum?treated=true")
        spc = read_spec.json()
        df = pd.DataFrame(spc["intensity"], index=spc["wavenumber"], columns=[read_count.json()])
        await asyncio.sleep(measure_period)

        while time.monotonic() < end_measure:
            read_count = sess.get(flowir_endpoint + "/ir-control/spectrum-count")
            read_spec = sess.put(flowir_endpoint + "/ir-control/acquire-spectrum?treated=true")
            spc = read_spec.json()
            n_df = pd.DataFrame(spc["intensity"], index=spc["wavenumber"], columns=[read_count.json()])
            # suppressed_df = n_df[read_count.json()] - bg[0]

            # save/record
            df = pd.concat([df, n_df], axis=1)
            df.to_csv(fr"W:\BS-FlowChemistry\People\Wei-Hsin\GL_data\2_flowIR\{date}_ir_{mongo_id}.csv")
            await asyncio.sleep(measure_period)

    logger.info("finish the ir collection")


async def main():
    date = datetime.date.today().strftime("%Y%m%d")

    # bg_list, bg_df = await collect_ir_bg(date, "background_3")
    bg_path = Path(rf"W:\BS-FlowChemistry\People\Wei-Hsin\GL_data\2_flowIR\20231011_ir_bg_100.csv")
    bg_df = pd.read_csv(bg_path, index_col=0, header=0)

    # name = 'off_line_test'
    # await record_ir_log(date, name, 120)

if __name__ == "__main__":
    asyncio.run(main())
    # signal_file = r"W:\BS-FlowChemistry\People\Wei-Hsin\GL_data\2_flowIR\20231012_ir_fake_50_P-IS.csv"
    # print(process_old_ir_np(signal_file))
    #
    # signal_file = r"W:\BS-FlowChemistry\People\Wei-Hsin\GL_data\2_flowIR\20231012_ir_fake_P-IS.csv"
    # print(process_old_ir_np(signal_file))

